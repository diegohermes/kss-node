#!/usr/bin/env node

var kss = require(__dirname + '/../lib/kss.js'),
	handlebars = require('handlebars'),
	yargs = require('yargs'),
	marked = require('marked'),
	wrench = require('wrench'),
	glob = require('glob'),
	path = require('path'),
	fs = require('fs'),
	template,
	init,
	processStyleguide,
	generatePage,
	config = {},
	configFile,
	KSS_FAILED = false,
	argv,
	error,
	version = require(__dirname + '/../package.json').version,
	pathResolveRecursive;

/**
 * CLI argument parsing.
 * @type {Object}
 */
argv = yargs
	.usage('Usage: kss-node <source> [destination] [options]')
	.wrap(80)
	.strict()

	.options('init', {
		alias     : 'i',
		describe  : 'Create a new style guide template to customize',
		default   : 'styleguide-template'
	})
	.options('template', {
		string    : true,
		alias     : 't',
		describe  : 'Use a custom template to build your style guide',
		default   : path.relative(process.cwd(), __dirname + '/../lib/template')
	})
	.options('helpers', {
		string    : true,
		describe  : 'Specify the location of custom handlebars helpers; see http://bit.ly/kss-helpers',
		default   : path.relative(process.cwd(), __dirname + '/../lib/template/helpers')
	})

	.options('mask', {
		string    : true,
		alias     : 'm',
		describe  : 'Use a mask for detecting files containing KSS comments',
		default   : '*.css|*.less|*.sass|*.scss|*.styl|*.stylus'
	})

	.options('css', {
		string    : true,
		describe  : 'Specify the URL of a CSS file to include in the style guide'
	})
	.options('js', {
		string    : true,
		describe  : 'Specify the URL of a JavaScript file to include in the style guide'
	})

	.options('custom', {
		string    : true,
		describe  : 'Process a custom property name when parsing KSS comments'
	})

	.options('source', {
		string    : true,
		describe  : 'Source directory to parse for KSS comments'
	})
	.options('destination', {
		string    : true,
		describe  : 'Destination directory of generated style guide',
		default   : 'styleguide'
	})

	.config('config')
	.alias('config', 'c')
	.describe('config', 'Load the kss-node configuration from a json file')

	.options('xdemo', {
		boolean   : true,
		// Alias is redundant, but prevents "Unknown argument: xdemo" error.
		alias     : 'xdemo'
	})

	.version(version, 'version')
	.help('help')
	.alias('help', 'h')
	.alias('help', '?')
	.argv;

// argv.init contains the default value. Explicitly check if the --init option
// was called and create a new style guide template.
if ("init" in yargs.argv || "i" in yargs.argv) {
	argv.init = path.resolve(argv.init);

	console.log('Creating a new style guide template...');
	try {
		error = wrench.copyDirSyncRecursive(
			__dirname + '/../lib/template',
			argv.init,
			{
				forceDelete: false,
				excludeHiddenUnix: true
			}
		);
		if (error) {
			throw error;
		}
	} catch (e) {
		console.log('Error! This folder already exists: ' + argv.init);
		return;
	}
	console.log('You can change it as you like, and use it with your style guide like so:');
	console.log('');
	console.log('kss-node [sourcedir] --template "'+argv.init+'"');
	console.log('');
	return;
}

// Determine which options are specified in a config json file.
if (argv.config) {
	// Helper function to apply path.resolve() to strings or arrays of strings.
	pathResolveRecursive = function(from, item) {
		var paths = [];
		if (item instanceof Array) {
			item.forEach(
				function(value, index) {
					paths[index] = path.resolve(from, value);
				}
			);
		}
		else {
			paths = path.resolve(from, item);
		}
		return paths;
	};
	// Make config paths relative to config file.
	configFile = path.resolve(argv.config);
	config = require(configFile);
	for (var key in config) {
		if (key != "js" && key != "css") {
			argv[key] = pathResolveRecursive(path.dirname(configFile), config[key]);
		}
	}
}
// Get the full source path.
if (argv.xdemo) {
	argv.source = [__dirname + '/../demo'];
	argv.css = ['public/styles.css'];
}
else {
	if (!argv.source) {
		argv.source = [];
	}
	else if (typeof argv.source == "string") {
		argv.source = [argv.source];
	}
	if (argv._.length > 0) {
		argv.source.push(argv._[0]);
	}
}
if (!argv.source.length) {
	yargs.showHelp();
	return;
}
for (var key in argv.source) {
	argv.source[key] = path.resolve(argv.source[key]);
}
// Get the full destination path.
if (argv.destination instanceof Array) {
	argv.destination = argv.destination.pop();
}
else if (!("destination" in yargs.argv) && argv._.length > 1) {
	argv.destination = argv._[1];
}
argv.destination = path.resolve(argv.destination);
// Get the full template path.
if (argv.template instanceof Array) {
	argv.template = argv.template.pop();
}
argv.template = path.resolve(argv.template);
// Get the full helpers path.
if (argv.helpers instanceof Array) {
	argv.helpers = argv.helpers.pop();
}
else if (!("helpers" in yargs.argv) && !config.helpers) {
	argv.helpers = argv.template + '/helpers';
}
argv.helpers = path.resolve(argv.helpers);
// Make these options an array.
if (typeof argv.custom == "string") {
	argv.custom = [argv.custom];
}
if (typeof argv.css == "string") {
	argv.css = [argv.css];
}
if (typeof argv.js == "string") {
	argv.js = [argv.js];
}

console.log('');
console.log('Generating your KSS style guide!');
console.log('');
console.log(' * KSS Source  : ' + argv.source.join(', '));
console.log(' * Destination : ' + argv.destination);
console.log(' * Template    : ' + argv.template);
console.log(' * Helpers     : ' + argv.helpers);
console.log('');

function init(source, destination, template, helpers) {
	var handlebarsTemplate;

	// Create a new destination directory.
	try {
		fs.mkdirSync(destination);
	} catch (e) {}

	// Optionally, copy the contents of the template's "public" folder.
	try {
		wrench.copyDirSyncRecursive(
			template + '/public',
			destination + '/public',
			{
				forceDelete: true,
				excludeHiddenUnix: true
			}
		);
	} catch (e) {}

	// Ensure a "public" folder exists.
	try {
		fs.mkdirSync(destination + '/public');
	} catch (e) {}

	// Load Handlebars helpers.
	if (fs.existsSync(helpers)) {
		// Load custom Handlebars helpers.
		var helperFiles = fs.readdirSync(helpers);

		helperFiles.forEach(function(fileName) {
			if (path.extname(fileName) !== '.js') {
				return;
			}
			var helper = require(helpers + '/' + fileName);
			if (typeof helper.register === 'function') {
				helper.register(handlebars);
			}
		});

		// Load the standard Handlebars helpers.
		var helperFile = require(__dirname + '/../lib/CLI/handlebars_helpers.js');
		helperFile.register(handlebars);
	}

	// Compile the Handlebars template.
	handlebarsTemplate = fs.readFileSync(template + '/index.html', 'utf8');
	handlebarsTemplate = handlebars.compile(handlebarsTemplate);

	return handlebarsTemplate;
};

template = init(argv.source, argv.destination, argv.template, argv.helpers);


// Generate the static HTML pages in the next tick, i.e. after the other functions have
// been defined and handlebars helpers set up.
process.nextTick(function() {
	console.log('...Parsing your style guide:');

	kss.traverse(argv.source, {
		multiline : true,
		markdown  : true,
		markup    : true,
		mask      : argv.mask
	}, function(err, styleguide) {
		if (err) throw err;
		processStyleguide(styleguide);
	});
});

function processStyleguide(styleguide) {
		var sections = styleguide.section(),
			sectionCount = sections.length,
			sectionRoots = [],
			rootCount,
			currentRoot,
			childSections = [],
			partials = {},
			partial,
			files = [],
			i;

		console.log(styleguide.data.files.map(function(file) {
			return ' - ' + file;
		}).join('\n'));

		// Throw an error if no KSS sections are found in the source files.
		if (sectionCount === 0) {
			throw 'No KSS documentation discovered in source files.';
		}

		console.log('...Determining section markup:');

		for (i = 0; i < sectionCount; i += 1) {
			// Register all the markup blocks as Handlebars partials.
			if (sections[i].markup()) {
				partial = {
					name: sections[i].reference(),
					reference: sections[i].reference(),
					file: '',
					markup: sections[i].markup(),
					data: {}
				};
				// If the markup is a file path, attempt to load the file.
				if (partial.markup.match(/^[^\n]+\.(html|hbs)$/)) {
					partial.file = partial.markup;
					partial.name = path.basename(partial.file, path.extname(partial.file));
					files = [];
					for (var key in argv.source) {
						if (!files.length) {
							files = glob.sync(argv.source[key] + '/**/' + partial.file);
						}
					}
					// If the markup file is not found, note that in the style guide.
					if (!files.length) {
						partial.markup += ' NOT FOUND!';
					}
					console.log(' - ' + partial.reference + ': ' + partial.markup);
					if (files.length) {
						// Load the partial's markup from file.
						partial.file = files[0];
						partial.markup = fs.readFileSync(partial.file, 'utf8');
						// Load sample data for the partial from the sample .json file.
						if (fs.existsSync(path.dirname(partial.file) + '/' + partial.name + '.json')) {
							try {
								partial.data = require(path.dirname(partial.file) + '/' + partial.name + '.json');
							} catch (e) {
								partial.data = {};
							}
						}
					}
				}
				else {
					console.log(' - ' + partial.reference + ': inline markup');
				}
				// Register the partial using the filename (without extension) or using
				// the style guide reference.
				handlebars.registerPartial(partial.name, partial.markup);
				// Save the name of the partial and its data for retrieval in the markup
				// helper, where we only know the reference.
				partials[partial.reference] = {
					name: partial.name,
					data: partial.data
				};
			}

			// Accumulate all of the sections' first indexes
			// in case they don't have a root element.
			currentRoot = sections[i].reference().split(/(?:\.|\s+\-\s+)/)[0];
			if (sectionRoots.indexOf(currentRoot) === -1) {
				sectionRoots.push(currentRoot);
			}
		}

		console.log('...Generating style guide sections:');

		// Now, group all of the sections by their root
		// reference, and make a page for each.
		rootCount = sectionRoots.length;
		for (i = 0; i < rootCount; i += 1) {
			childSections = styleguide.section(sectionRoots[i]+'.*');

			generatePage(styleguide, childSections, sectionRoots[i], sectionRoots, partials);
		}

		// Generate the homepage.
		childSections = [];
		generatePage(styleguide, childSections, 'styleguide.homepage', sectionRoots, partials);
};

// Renders the handlebars template for a section and saves it to a file.
generatePage = function(styleguide, sections, root, sectionRoots, partials) {
	var filename = '', files,
		homepageText = false,
		styles = '',
		scripts = '';

	if (root == 'styleguide.homepage') {
		filename = 'index.html';
		console.log(' - homepage');
		// Ensure homepageText is a non-false value.
		for (var key in argv.source) {
			if (!homepageText) {
				try {
					files = glob.sync(argv.source[key] + '/**/styleguide.md');
					if (files.length) {
						homepageText = ' ' + marked(fs.readFileSync(files[0], 'utf8'));
					}
				} catch (e) {}
			}
		}
		if (!homepageText) {
			homepageText = ' ';
			console.log('   ...no homepage content found in styleguide.md.');
		}
	}
	else {
		filename = 'section-' + kss.KssSection.prototype.encodeReferenceURI(root) + '.html';
		console.log(
			' - section '+root+' [',
			styleguide.section(root) ? styleguide.section(root).header() : 'Unnamed',
			']'
		);
	}
	// Create the HTML to load the optional CSS and JS.
	for (var key in argv.css) {
		styles = styles + '<link rel="stylesheet" href="' + argv.css[key] + '">\n';
	}
	for (var key in argv.js) {
		scripts = scripts + '<script src="' + argv.js[key] + '"></script>\n';
	}
	fs.writeFileSync(argv.destination + '/' + filename,
		template({
			partials:     partials,
			styleguide:   styleguide,
			sectionRoots: sectionRoots,
			sections:     sections.map(function(section) { return section.JSON(); }),
			rootName:     root,
			argv:         argv || {},
			homepage:     homepageText,
			styles:       styles,
			scripts:      scripts
		})
	);
};

process.on('exit', function() {
	if (!KSS_FAILED) {
		console.log('');
		console.log('Generation completed successfully!');
		console.log('');
	}
});

process.on('uncaughtException', function(err) {
	console.log('\nError during generation\n');

	if (err.message || err.stack) {
		console.log(err.message);
		console.log(err.stack);
	}
	else
		console.log(err);

	KSS_FAILED = true;
	process.exit(1);
});
